Flow in Angular 

main.ts-> AppCompoent -> inside it have decorator :

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})

It is the typescrip feature that add Meta Data to the class AppComponent 

- @Component is come from @angular/core 
- selector: 'app-root': is the element that tell the angular looking for the html code and this makeup <app-root> element 
are store in the templateUrl: './app.component.html'

1. inside the app.component.html 

<header>
  <img src="assets/angular-logo.png" alt="The Angular logo: The letter 'A'" />
  <h1>Let's get started!</h1>
  <p>Time to learn all about Angular!</p>
</header>

Note :

app.component.ts ( our element name . components or other thing . ts :type )

2. in the header.component.ts 

-selector: 'app-header' (component element tag) : it should put two work with - in the meeting because one word it will be confuse with the default tag in html 

-template : it mush have template for the make up language (html)
example : 

template : '<h1>Hello world</h1>' it is called inline code but we don't use this kind of inline code;
normaly we use inline code for very short display code 

==> templateUrl : we use for external template html 

ex: header.components.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>EasyTask</title>
</head>
<body>
    <h1>EasyTask</h1>
</body>
</html>

- standalone: true, : version above 19 it implesit but below 19 we need to declare by ourselves 

3. to display the element app-header 

We add the <app-header></app-header> to the index.html

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Essentials</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-header></app-header>
  <app-root></app-root>
</body>
</html>

but it is not working because in the angular it is not scan auto for the new element that we add up 
we need explesitly tell the angular to add need component 

==> in the main.ts

import { bootstrapApplication } from '@angular/platform-browser';

import { AppComponent } from './app/app.component';
import { HeaderComponent } from './app/header.component';

bootstrapApplication(AppComponent).catch((err) => console.error(err));
bootstrapApplication(HeaderComponent);

- HeaderComponent is our new component 


































































 